const httpErrors = require("http-errors");
const Order = require("../models/order.model");
const OrderDetail = require("../models/order-detail.model");
const PayOS = require("@payos/node");
require("dotenv").config();

// Kh·ªüi t·∫°o instance c·ªßa PayOS
const payOS = new PayOS(
  process.env.PAYOS_CLIENT_ID,
  process.env.PAYOS_API_KEY,
  process.env.PAYOS_CHECKSUM_KEY
);

class PayOsController {
  // Kh·ªüi t·∫°o thanh to√°n v√† t·∫°o payment link
  async createPayment(req, res, next) {
    try {
      const { orderId } = req.body;

      // T√¨m th√¥ng tin ƒë∆°n h√†ng t·ª´ database
      const order = await Order.findById(orderId).populate(
        "customer_id",
        "name email phone"
      );

      if (!order) {
        throw httpErrors.NotFound("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng");
      }

      // T√¨m chi ti·∫øt ƒë∆°n h√†ng t·ª´ b·∫£ng OrderDetail
      const orderDetails = await OrderDetail.find({
        order_id: orderId,
      }).populate("product_id", "name price");

      if (!orderDetails || orderDetails.length === 0) {
        throw httpErrors.NotFound("Kh√¥ng t√¨m th·∫•y chi ti·∫øt ƒë∆°n h√†ng");
      }
      // T·∫°o m√£ giao d·ªãch duy nh·∫•t
      function generateTransactionCodeFromOrderId(orderId) {
        // L·∫•y timestamp hi·ªán t·∫°i (s·ªë gi√¢y)
        const timestamp = Math.floor(Date.now() / 1000);

        // L·∫•y 6 k√Ω t·ª± cu·ªëi c·ªßa orderId
        const lastSixChars = orderId.toString().slice(-6);

        // Chuy·ªÉn ƒë·ªïi c√°c k√Ω t·ª± th√†nh m√£ ASCII v√† l·∫•y ph·∫ßn d∆∞ khi chia cho 10
        // ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ c√≥ c√°c ch·ªØ s·ªë
        let numericCode = "";
        for (let i = 0; i < lastSixChars.length; i++) {
          numericCode += lastSixChars.charCodeAt(i) % 10;
        }

        // L·∫•y 6 ch·ªØ s·ªë ƒë·∫ßu ti√™n
        numericCode = numericCode.slice(0, 6);

        // T·∫°o m√£ giao d·ªãch b·∫±ng c√°ch k·∫øt h·ª£p timestamp v·ªõi m√£ s·ªë t·ª´ orderId
        // Nh∆∞ng ƒë·∫£m b·∫£o k·∫øt qu·∫£ kh√¥ng v∆∞·ª£t qu√° MAX_SAFE_INTEGER
        const maxSafePrefix = Math.floor(Number.MAX_SAFE_INTEGER / 1000000);
        const prefix = timestamp % maxSafePrefix;

        // K·∫øt h·ª£p prefix v·ªõi numericCode ƒë·ªÉ t·∫°o th√†nh transaction code
        const transactionCode = parseInt(prefix.toString() + numericCode);

        return transactionCode;
      }
      const transactionCode = generateTransactionCodeFromOrderId(orderId);
      console.log("Generated transaction code:", transactionCode);

      // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu chi ti·∫øt ƒë∆°n h√†ng th√†nh format y√™u c·∫ßu c·ªßa PayOS
      const items = orderDetails.map((detail) => {
        const productName =
          detail.product_id && detail.product_id.name
            ? detail.product_id.name.substring(0, 25) // Gi·ªõi h·∫°n t√™n s·∫£n ph·∫©m
            : "San pham";

        return {
          name: productName,
          quantity: detail.quantity || 1,
          price: detail.price || 0,
        };
      });

      // T·∫°o d·ªØ li·ªáu thanh to√°n theo ƒë·ªãnh d·∫°ng c·ªßa PayOS
      const lastSevenDigits = transactionCode.toString().slice(-7);
      const paymentData = {
        orderCode: transactionCode,
        amount: order.total_price,
        description: `PAYOS${lastSevenDigits}`, // M√¥ t·∫£ ng·∫Øn g·ªçn kh√¥ng qu√° 25 k√Ω t·ª±
        returnUrl: `${process.env.FRONTEND_URL}/order-confirmation?orderId=${orderId}`,
        cancelUrl: `${process.env.BE_API_URL || 'http://localhost:9999'}/api/payos/cancel?orderCode=${transactionCode}&orderId=${orderId}`,
        items: items,
      };

      // N·∫øu c√≥ th√¥ng tin kh√°ch h√†ng, th√™m v√†o paymentData
      if (order.customer_id && order.customer_id.name) {
        paymentData.buyerInfo = {
          name: order.customer_id.name,
          email: order.customer_id.email || "",
          phone: order.customer_id.phone || "",
        };
      }

      // G·ªçi API PayOS ƒë·ªÉ t·∫°o payment link
      const paymentLinkResponse = await payOS.createPaymentLink(paymentData);

      // C·∫≠p nh·∫≠t ƒë∆°n h√†ng v·ªõi th√¥ng tin thanh to√°n
      order.order_payment_id = transactionCode.toString(); // L∆∞u transactionCode v√†o order_payment_id
      order.payment_method = "payos";
      order.status_id = "pending";
      await order.save();

      // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang thanh to√°n c·ªßa PayOS
      return res.status(200).json({
        success: true,
        message: "T·∫°o link thanh to√°n th√†nh c√¥ng",
        data: {
          paymentUrl: paymentLinkResponse.checkoutUrl,
          transactionCode: transactionCode,
          qrCode: paymentLinkResponse.qrCode, // Tr·∫£ v·ªÅ m√£ QR code n·∫øu c√≥
        },
      });
    } catch (error) {
      console.error("PayOs payment error:", error);
      next(error.isJoi ? httpErrors.BadRequest(error.message) : error);
    }
  }
  
  // X·ª≠ l√Ω webhook t·ª´ PayOS
  async handleWebhook(req, res, next) {
    // Tr·∫£ v·ªÅ response ngay l·∫≠p t·ª©c ƒë·ªÉ PayOS ng·ª´ng polling
    res.status(200).json({ 
      success: true, 
      message: "Webhook received",
      timestamp: new Date().toISOString()
    });

    // X·ª≠ l√Ω webhook trong background
    setImmediate(async () => {
      try {
        // Log d·ªØ li·ªáu webhook ƒë·ªÉ debug
        console.log("=== PayOS Webhook Processing ===");
        console.log("Headers:", req.headers);
        console.log("Body:", JSON.stringify(req.body, null, 2));
        console.log("==============================");

        const webhookData = req.body;
        if (!webhookData) {
          console.error("Empty webhook data");
          return;
        }

        console.log("Webhook Code:", webhookData.code);
        console.log("Webhook Success:", webhookData.success);
        console.log("Webhook Description:", webhookData.desc);
        
        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p webhook kh√¥ng c√≥ data
        if (!webhookData.data) {
          console.log("Webhook without data - possibly cancelled transaction");
          if (webhookData.code !== "00" || webhookData.success === false) {
            console.log("Transaction was cancelled or failed:", {
              code: webhookData.code,
              success: webhookData.success,
              desc: webhookData.desc
            });
          }
          return;
        }

        const {
          bin, accountNumber, accountName, amount, description,
          orderCode, paymentLinkId, status, qrCode,
          transactionDateTime, counterAccountName, reference,
        } = webhookData.data;

        console.log(`Processing payment for order: ${orderCode}, status: ${status}, amount: ${amount}`);

        // T√¨m ƒë∆°n h√†ng theo orderCode
        const order = await Order.findOne({
          order_payment_id: orderCode.toString(),
        });

        if (!order) {
          console.error(`Order not found for orderCode: ${orderCode}`);
          return;
        }

        console.log(`Found order: ${order._id} with current status: ${order.status_id}`);

        // X·ª≠ l√Ω c√°c tr·∫°ng th√°i thanh to√°n
        if (webhookData.code === "00" && webhookData.success === true && status === "PAID") {
          // Thanh to√°n th√†nh c√¥ng
          order.status_id = "paid";
          order.order_status = "processing";
          order.updated_at = new Date();

          order.payment_details = {
            bin: bin || "", accountNumber: accountNumber || "", accountName: accountName || "",
            amount: amount || 0, description: description || "", orderCode: orderCode || "",
            currency: webhookData.data.currency || "VND", paymentLinkId: paymentLinkId || "",
            status: status || "", transactionTime: transactionDateTime || new Date(),
            paymentReference: reference || "", payerName: counterAccountName || accountName || "",
            qrCode: qrCode || ""
          };

          console.log(`‚úÖ Payment successful - Order ${order._id} status updated to 'paid'`);
          
        } else if (
          status === "CANCELLED" || status === "EXPIRED" ||
          webhookData.code !== "00" || webhookData.success === false
        ) {
          // Thanh to√°n b·ªã h·ªßy, h·∫øt h·∫°n ho·∫∑c th·∫•t b·∫°i
          order.status_id = "payment_failed";
          order.order_status = "cancelled";
          order.updated_at = new Date();
          
          order.payment_details = {
            orderCode: orderCode || "", amount: amount || 0, description: description || "",
            status: status || "FAILED", transactionTime: transactionDateTime || new Date(),
            error_code: webhookData.code, error_message: webhookData.desc || `Payment ${status || 'failed'}`
          };
          
          console.log(`‚ùå Payment ${status || 'failed'} - Order ${order._id} status updated to 'payment_failed'`);
          
        } else {
          console.log(`‚ÑπÔ∏è Payment status: ${status} - No action taken for order ${order._id}`);
          return;
        }

        // L∆∞u thay ƒë·ªïi v√†o database
        await order.save();
        console.log(`üíæ Order ${order._id} updated successfully in database`);
        
      } catch (error) {
        console.error("‚ùå PayOS webhook background processing error:", error);
      }
    });
  }

  // Th√™m ph∆∞∆°ng th·ª©c processWebhookAsync v√†o class PayOsController
  async processWebhookAsync(headers, body) {
    try {
      console.log("Processing webhook. Headers:", headers);
      console.log("Webhook body:", JSON.stringify(body));

      // B·ªè qua b∆∞·ªõc x√°c th·ª±c webhook trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn
      // Trong m√¥i tr∆∞·ªùng production, b·∫°n n√™n t√¨m c√°ch x√°c th·ª±c webhook ƒë√∫ng c√°ch
      // let webhookIsValid = true;

      // X·ª≠ l√Ω d·ªØ li·ªáu webhook
      const { orderCode, status, amount } = body;
      const transactionCode = orderCode;

      // T√¨m ƒë∆°n h√†ng theo transaction code (ƒë∆∞·ª£c l∆∞u trong order_payment_id)
      const order = await Order.findOne({
        order_payment_id: transactionCode.toString(),
      });

      if (!order) {
        console.error(
          `Order not found for transaction code: ${transactionCode}`
        );
        return;
      }

      console.log(
        `Found order ${order._id} with current status ${order.status_id}`
      );

      // N·∫øu thanh to√°n th√†nh c√¥ng, c·∫≠p nh·∫≠t th√™m th√¥ng tin
      if (status === "PAID") {
        order.status_id = "processing"; // Chuy·ªÉn ƒë∆°n h√†ng sang tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
        order.updated_at = new Date();
        console.log(`Updated order ${order._id} status to processing`);
      } else if (status === "CANCELLED" || status === "FAILED") {
        order.status_id = "cancelled";
        order.updated_at = new Date();
        console.log(`Updated order ${order._id} status to cancelled`);
      }

      await order.save();
      console.log("Order saved successfully");
    } catch (error) {
      console.error("Background webhook processing error:", error);
    }
  }

  // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
  async checkPaymentStatus(req, res, next) {
    try {
      const { transactionCode } = req.params;
      console.log("Checking payment status for transaction:", transactionCode);

      // ƒê·∫∑t timeout ng·∫Øn h∆°n ƒë·ªÉ tr√°nh treo server
      const timeoutPromise = new Promise((_, reject) =>
        setTimeout(() => reject(new Error("Request timeout")), 3000)
      );

      // T√¨m ƒë∆°n h√†ng theo transaction_code (ƒë∆∞·ª£c l∆∞u trong order_payment_id)
      const orderPromise = Order.findOne({
        order_payment_id: transactionCode.toString(),
      });

      // S·ª≠ d·ª•ng Promise.race ƒë·ªÉ tr√°nh treo n·∫øu DB qu√° l√¢u
      const order = await Promise.race([orderPromise, timeoutPromise]);

      if (!order) {
        console.log("Order not found for transaction code:", transactionCode);
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£ giao d·ªãch n√†y"
        });
      }

      console.log("Found order:", order._id, "Status:", order.status_id);

      // X√°c ƒë·ªãnh tr·∫°ng th√°i thanh to√°n d·ª±a tr√™n database
      let paymentStatus = "PENDING";
      
      switch (order.status_id) {
        case "paid":
        case "processing":
          paymentStatus = "PAID";
          break;
        case "payment_failed":
        case "cancelled":
          paymentStatus = "CANCELLED";
          break;
        case "pending":
        default:
          paymentStatus = "PENDING";
          break;
      }

      console.log("Determined payment status:", paymentStatus);

      // L·∫•y s·ªë l∆∞·ª£ng items t·ª´ chi ti·∫øt ƒë∆°n h√†ng v·ªõi timeout
      let itemCount = 0;
      try {
        const orderDetailsPromise = OrderDetail.find({ order_id: order._id });
        const orderDetailsTimeout = new Promise((_, reject) =>
          setTimeout(() => reject(new Error("OrderDetail timeout")), 2000)
        );
        
        const orderDetails = await Promise.race([orderDetailsPromise, orderDetailsTimeout]);
        itemCount = orderDetails ? orderDetails.length : 0;
      } catch (error) {
        console.warn("Failed to get order details, using default count:", error.message);
        itemCount = 0;
      }

      const response = {
        success: true,
        data: {
          order: {
            id: order._id,
            status: order.status_id,
            total: order.total_price || 0,
            items: itemCount,
          },
          payment: {
            status: paymentStatus,
            transactionCode: transactionCode,
            updated_at: order.updated_at,
            // Th√™m th√¥ng tin l·ªói n·∫øu c√≥
            ...(order.payment_details && order.payment_details.error_message && {
              error_message: order.payment_details.error_message
            })
          },
        },
      };

      return res.status(200).json(response);
      
    } catch (error) {
      console.error("Check payment status error:", error);
      
      // ƒê·∫£m b·∫£o lu√¥n tr·∫£ v·ªÅ response
      if (!res.headersSent) {
        return res.status(500).json({
          success: false,
          message: "L·ªói h·ªá th·ªëng khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n",
          error: error.message
        });
      }
    }
  }

  // Ph∆∞∆°ng th·ª©c m·ªõi: Manually check v√† update tr·∫°ng th√°i t·ª´ PayOS
  async manualCheckAndUpdate(req, res, next) {
    try {
      const { transactionCode } = req.params;
      
      console.log(`[Manual Check] Checking transaction: ${transactionCode}`);
      
      // T√¨m ƒë∆°n h√†ng trong database
      const order = await Order.findOne({
        order_payment_id: transactionCode.toString(),
      });

      if (!order) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£ giao d·ªãch n√†y"
        });
      }

      console.log(`[Manual Check] Found order: ${order._id}, current status: ${order.status_id}`);

      try {
        // G·ªçi API PayOS ƒë·ªÉ l·∫•y th√¥ng tin thanh to√°n m·ªõi nh·∫•t
        const paymentInfo = await payOS.getPaymentLinkInformation(parseInt(transactionCode));
        
        console.log(`[Manual Check] PayOS response:`, JSON.stringify(paymentInfo, null, 2));

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i d·ª±a tr√™n response t·ª´ PayOS
        if (paymentInfo.status === "PAID") {
          // Thanh to√°n th√†nh c√¥ng
          order.status_id = "paid";
          order.order_status = "processing";
          order.updated_at = new Date();

          order.payment_details = {
            orderCode: transactionCode,
            amount: paymentInfo.amount || order.total_price,
            status: paymentInfo.status,
            transactionTime: new Date(),
            paymentReference: paymentInfo.reference || "",
            paymentMethod: "payos",
            updatedManually: true
          };

          await order.save();
          
          console.log(`[Manual Check] ‚úÖ Order ${order._id} updated to PAID status`);

          return res.status(200).json({
            success: true,
            message: "ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng",
            data: {
              order: {
                id: order._id,
                status: order.status_id,
                total: order.total_price
              },
              payment: {
                status: "PAID",
                transactionCode: transactionCode,
                amount: paymentInfo.amount
              }
            }
          });
          
        } else if (paymentInfo.status === "CANCELLED" || paymentInfo.status === "EXPIRED") {
          // Thanh to√°n b·ªã h·ªßy ho·∫∑c h·∫øt h·∫°n
          order.status_id = "payment_failed";
          order.order_status = "cancelled";
          order.updated_at = new Date();
          
          order.payment_details = {
            orderCode: transactionCode,
            amount: paymentInfo.amount || order.total_price,
            status: paymentInfo.status,
            transactionTime: new Date(),
            error_message: `Payment ${paymentInfo.status}`,
            paymentMethod: "payos",
            updatedManually: true
          };

          await order.save();
          
          console.log(`[Manual Check] ‚ùå Order ${order._id} updated to ${paymentInfo.status} status`);

          return res.status(200).json({
            success: true,
            message: `Tr·∫°ng th√°i thanh to√°n: ${paymentInfo.status}`,
            data: {
              order: {
                id: order._id,
                status: order.status_id,
                total: order.total_price
              },
              payment: {
                status: paymentInfo.status,
                transactionCode: transactionCode,
                amount: paymentInfo.amount
              }
            }
          });
          
        } else {
          // Tr·∫°ng th√°i kh√°c (PENDING, etc.)
          console.log(`[Manual Check] ‚ÑπÔ∏è Payment status: ${paymentInfo.status} - No update needed`);
          
          return res.status(200).json({
            success: true,
            message: `Tr·∫°ng th√°i hi·ªán t·∫°i: ${paymentInfo.status}`,
            data: {
              order: {
                id: order._id,
                status: order.status_id,
                total: order.total_price
              },
              payment: {
                status: paymentInfo.status,
                transactionCode: transactionCode,
                amount: paymentInfo.amount
              }
            }
          });
        }

      } catch (payosError) {
        console.error(`[Manual Check] PayOS API Error:`, payosError);
        
        return res.status(500).json({
          success: false,
          message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi PayOS ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i",
          error: payosError.message
        });
      }

    } catch (error) {
      console.error("[Manual Check] Error:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói h·ªá th·ªëng khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n",
        error: error.message
      });
    }
  }

  // X·ª≠ l√Ω khi user h·ªßy thanh to√°n t·ª´ PayOS
  async handleCancel(req, res, next) {
    try {
      const { orderCode, orderId } = req.query;
      console.log("PayOS Cancel received:", { orderCode, orderId });

      if (orderCode) {
        // T√¨m ƒë∆°n h√†ng theo orderCode
        const order = await Order.findOne({
          order_payment_id: orderCode.toString(),
        });

        if (order) {
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh cancelled
          order.status_id = "payment_failed";
          order.order_status = "cancelled";
          order.updated_at = new Date();
          
          // L∆∞u th√¥ng tin h·ªßy
          order.payment_details = {
            orderCode: orderCode,
            status: "CANCELLED",
            transactionTime: new Date(),
            error_message: "User cancelled payment"
          };

          await order.save();
          console.log(`Order ${order._id} marked as cancelled due to user action`);
        }
      }

      // Redirect v·ªÅ frontend v·ªõi th√¥ng b√°o h·ªßy
      const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
      const redirectUrl = `${frontendUrl}/checkout?cancelled=true${orderId ? `&orderId=${orderId}` : ''}${orderCode ? `&orderCode=${orderCode}` : ''}`;
      
      return res.redirect(redirectUrl);
    } catch (error) {
      console.error("PayOS cancel handler error:", error);
      
      // V·∫´n redirect v·ªÅ frontend ngay c·∫£ khi c√≥ l·ªói
      const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
      return res.redirect(`${frontendUrl}/checkout?cancelled=true&error=true`);
    }
  }
}

module.exports = new PayOsController();
